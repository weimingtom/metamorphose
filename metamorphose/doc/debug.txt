二、核心hack
	加入断点在以下位置
	符号切割：Sytax.llex()或者StringBuffer.append()
	语义：Sytax.statement()
	虚拟机循环：Lua.vmExecute()
		<-这里断点可以打印出基本指令，例如赋值=操作，赋值return操作
		<-case OP_LOADK:
			(this._stack[this._base + a] as Slot).r = (k[ARGBx(i)] as Slot).r;
			(this._stack[this._base + a] as Slot).d = (k[ARGBx(i)] as Slot).d;
->			trace("OP_LOADK:stack[" + (this._base+a) + 
				"]=k[" + ARGBx(i) + "]=" + k[ARGBx(i)].d);
			continue;
	
整数转浮点数字符串精度问题
断点：precisionTrim
	<-formatFloatRawF
		var s:String = d.toPrecision(20); //String(d); //FIXME:整数转字符串会丢失小数点后1位精度
	<-formatFloatRawE
		var s:String = d.toPrecision(20);//String(d); //FIXME:整数转浮点
		
-------------------


打印opcode

				//20170402:added
				if (D) 
				{
					//usage:luac -l cf.lua
					for (var i_test:int = 0; i_test < code.length; i_test++) 
					{
						var name1:String = getOpcodeName(OPCODE(code[i_test]));
						trace(">>>OPCODE(code(" + (i_test + 1) + ")) == " + name1);
					}
				}				
				
------------------

打印pc和opcode

					//20170402:added
					if (D) {
						var name2:String = getOpcodeName(OPCODE(i));
						trace(">>>pc == " + pc + ", name == " + name2);
					}


		