<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<js:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
       xmlns:js="library://ns.apache.org/flexjs/basic" 
	   >
	<fx:Script>
		<![CDATA[
			import com.iteye.weimingtom.metamorphose.lua.BaseLib;
			import com.iteye.weimingtom.metamorphose.lua.Lua;
			import com.iteye.weimingtom.metamorphose.lua.MathLib;
			import com.iteye.weimingtom.metamorphose.lua.OSLib;
			import com.iteye.weimingtom.metamorphose.lua.PackageLib;
			import com.iteye.weimingtom.metamorphose.lua.StringLib;
			import com.iteye.weimingtom.metamorphose.lua.TableLib;
			
			private function testit():void
			{
				const test001:String = "n = 99 + (1 * 10) / 2 - 0.5;\n" +
					"if n > 10 then return 'Oh, 真的比10还大哦:'..n end\n" +
					"return n\n";
				const test002:String = "return _VERSION"
				const test003:String = "return nil";
				
				const isLoadLib:Boolean = true;
				try
				{
					trace("Start test...");
					var L:Lua = new Lua();
					if(isLoadLib)
					{
						BaseLib.open(L);
						PackageLib.open(L);
						MathLib.open(L);
						OSLib.open(L);
						StringLib.open(L);
						TableLib.open(L);
					}
					var status:int = L.doString(test002);
					if (status != 0)
					{
						var errObj:Object = L.value(1);
						var tostring:Object = L.getGlobal("tostring");
						L.pushObject(tostring);
						L.pushObject(errObj);
						L.call(1, 1);
						var errObjStr:String = L.toString(L.value(-1));
						throw new Error("Error compiling : " + L.value(1));
					} else {
						var result:Object = L.value(1);
						var tostring_:Object = L.getGlobal("tostring");
						L.pushObject(tostring_);
						L.pushObject(result);
						L.call(1, 1);
						var resultStr:String = L.toString(L.value(-1));
						trace("Result >>> " + resultStr);
						label1.text = "Result >>> " + resultStr;
					}
				}
				catch (e:Error)
				{
					trace(e.getStackTrace());
					label1.text = "" + e.getStackTrace();
				}
			}
		]]>
	</fx:Script>
	
    <js:valuesImpl>
        <js:SimpleCSSValuesImpl />
    </js:valuesImpl>
    <js:initialView>
        <js:View initComplete="testit()">
        	<js:Label text="Hello World!" id="label1"/>
        </js:View>
    </js:initialView>
</js:Application>
